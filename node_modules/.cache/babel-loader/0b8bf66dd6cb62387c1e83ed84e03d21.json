{"ast":null,"code":"/* import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { GLOBALTYPES } from '../../redux/actions/globalTypes';\r\nimport { addUser, getConversations } from \"../../redux/actions/messageAction\";\r\nimport { getDataAPI } from '../../utils/fetchData';\r\nimport UserCard from \"../UserCard\";\r\n\r\nconst LeftSide = () => {\r\n    const { auth, message } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const pageEnd = useRef();\r\n    const [page, setPage] = useState(0);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [searchUsers, setSearchUsers] = useState([]);\r\n\r\n    const handleSearch = async e => {\r\n        e.preventDefault();\r\n        if (!search) return setSearchUsers([]);\r\n\r\n    try {\r\n      const res = await getDataAPI(`search?username=${search}`, auth.token);\r\n      setSearchUsers(res.data.users);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n    };\r\n\r\n    const handleAddUser = (user) => {\r\n        setSearch('');\r\n        setSearchUsers([]);\r\n        dispatch(addUser({user, message}));\r\n        return history.push(`/message/${user._id}`);\r\n    };\r\n\r\n    const isActive = (user) => {\r\n      if(id === user._id) return 'active';\r\n      return '';\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (message.firstLoad) return;\r\n      dispatch(getConversations({ auth }));\r\n    }, [dispatch, auth, message.firstLoad]);\r\n\r\n     useEffect(() => {\r\n       const observer = new IntersectionObserver(\r\n         (entries) => {\r\n           if (entries[0].isIntersecting) {\r\n             setPage((p) => p + 1);\r\n           }\r\n         },\r\n         {\r\n           threshold: 0.1,\r\n         }\r\n       );\r\n       observer.observe(pageEnd.current);\r\n     }, [setPage]);\r\n\r\n     useEffect(() => {\r\n       if (message.resultUsers >= (page - 1) * 9 && page > 1) {\r\n         dispatch(getConversations({ auth, page }));\r\n       }\r\n     }, [message.resultUsers, page, auth, dispatch]);\r\n\r\n    return (\r\n      <>\r\n        <form className=\"message_header\" onSubmit={handleSearch}>\r\n          <input\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            placeholder=\"search...\"\r\n          />\r\n\r\n          <button style={{ display: \"none\" }} type=\"submit\" id=\"search\">\r\n            Search\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"message_chat_list\">\r\n          {searchUsers.length !== 0 ? (\r\n            <>\r\n              {searchUsers.map((user) => (\r\n                <div\r\n                  key={user._id}\r\n                  className={`message_user ${isActive(user)}`}\r\n                  onClick={() => handleAddUser(user)}\r\n                >\r\n                  <UserCard user={user} />\r\n                </div>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {message.users.map((user) => (\r\n                <div\r\n                  key={user._id}\r\n                  cclassName={`message_user ${isActive(user)}`}\r\n                  onClick={() => handleAddUser(user)}\r\n                >\r\n                  <UserCard user={user} msg={true}>\r\n                    <i className=\"fas fa-circle\" />\r\n                  </UserCard>\r\n                </div>\r\n              ))}\r\n            </>\r\n          )}\r\n\r\n          <button style={{opacity: 0}} ref={pageEnd}>Load more..</button>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default LeftSide */","map":{"version":3,"sources":["C:/Users/Laureen/Downloads/escort/client/src/components/message/LeftSide.js"],"names":[],"mappingssourcesContent":["/* import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { GLOBALTYPES } from '../../redux/actions/globalTypes';\r\nimport { addUser, getConversations } from \"../../redux/actions/messageAction\";\r\nimport { getDataAPI } from '../../utils/fetchData';\r\nimport UserCard from \"../UserCard\";\r\n\r\nconst LeftSide = () => {\r\n    const { auth, message } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const pageEnd = useRef();\r\n    const [page, setPage] = useState(0);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [searchUsers, setSearchUsers] = useState([]);\r\n\r\n    const handleSearch = async e => {\r\n        e.preventDefault();\r\n        if (!search) return setSearchUsers([]);\r\n\r\n    try {\r\n      const res = await getDataAPI(`search?username=${search}`, auth.token);\r\n      setSearchUsers(res.data.users);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n    };\r\n\r\n    const handleAddUser = (user) => {\r\n        setSearch('');\r\n        setSearchUsers([]);\r\n        dispatch(addUser({user, message}));\r\n        return history.push(`/message/${user._id}`);\r\n    };\r\n\r\n    const isActive = (user) => {\r\n      if(id === user._id) return 'active';\r\n      return '';\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (message.firstLoad) return;\r\n      dispatch(getConversations({ auth }));\r\n    }, [dispatch, auth, message.firstLoad]);\r\n\r\n     useEffect(() => {\r\n       const observer = new IntersectionObserver(\r\n         (entries) => {\r\n           if (entries[0].isIntersecting) {\r\n             setPage((p) => p + 1);\r\n           }\r\n         },\r\n         {\r\n           threshold: 0.1,\r\n         }\r\n       );\r\n       observer.observe(pageEnd.current);\r\n     }, [setPage]);\r\n\r\n     useEffect(() => {\r\n       if (message.resultUsers >= (page - 1) * 9 && page > 1) {\r\n         dispatch(getConversations({ auth, page }));\r\n       }\r\n     }, [message.resultUsers, page, auth, dispatch]);\r\n\r\n    return (\r\n      <>\r\n        <form className=\"message_header\" onSubmit={handleSearch}>\r\n          <input\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            placeholder=\"search...\"\r\n          />\r\n\r\n          <button style={{ display: \"none\" }} type=\"submit\" id=\"search\">\r\n            Search\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"message_chat_list\">\r\n          {searchUsers.length !== 0 ? (\r\n            <>\r\n              {searchUsers.map((user) => (\r\n                <div\r\n                  key={user._id}\r\n                  className={`message_user ${isActive(user)}`}\r\n                  onClick={() => handleAddUser(user)}\r\n                >\r\n                  <UserCard user={user} />\r\n                </div>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {message.users.map((user) => (\r\n                <div\r\n                  key={user._id}\r\n                  cclassName={`message_user ${isActive(user)}`}\r\n                  onClick={() => handleAddUser(user)}\r\n                >\r\n                  <UserCard user={user} msg={true}>\r\n                    <i className=\"fas fa-circle\" />\r\n                  </UserCard>\r\n                </div>\r\n              ))}\r\n            </>\r\n          )}\r\n\r\n          <button style={{opacity: 0}} ref={pageEnd}>Load more..</button>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default LeftSide */\r\n"]},"metadata":{},"sourceType":"module"}