{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\"\n};\nexport const createPost = _ref => {\n  let {\n    content,\n    images,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n\n      if (images.length > 0) {\n        media = await imageUpload(images);\n      }\n\n      const res = await postDataAPI('posts', {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: { ...res.data.newPost,\n          user: auth.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: false\n        }\n      }); // todo notification\n\n      const msg = {\n        id: res.data.newPost._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${res.data.newPost._id}`,\n        content,\n        image: media[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI('posts', token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = _ref2 => {\n  let {\n    content,\n    images,\n    auth,\n    status\n  } = _ref2;\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n\n    if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) {\n      return;\n    }\n\n    try {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n\n      if (imgNewUrl.length > 0) {\n        media = await imageUpload(imgNewUrl);\n      }\n\n      const res = await patchDataAPI(`post/${status._id}`, {\n        content,\n        images: [...imgOldUrl, ...media]\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likePost = _ref3 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref3;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: [...post.likes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"likePost\", newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/like`, null, auth.token); // todo notification\n\n      const msg = {\n        id: auth.user._id,\n        text: \"Liked your post.\",\n        recipients: [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikePost = _ref4 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref4;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit(\"unLikePost\", newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // todo notification\n\n      const msg = {\n        id: auth.user._id,\n        text: \"Liked your post.\",\n        recipients: [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPost = _ref5 => {\n  let {\n    detailPost,\n    id,\n    auth\n  } = _ref5;\n  return async dispatch => {\n    if (detailPost.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.post\n        });\n      } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const deletePost = _ref6 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref6;\n  return async dispatch => {\n    dispatch({\n      type: POST_TYPES.DELETE_POST,\n      payload: post\n    });\n\n    try {\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token); // todo notification\n\n      const msg = {\n        id: post._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const reportPost = _ref7 => {\n  let {\n    post,\n    auth\n  } = _ref7;\n  return async dispatch => {\n    const reportExist = post.reports.find(report => report === auth.user._id);\n\n    if (reportExist && reportExist.length > 0) {\n      return dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: \"You have already reported this post.\"\n        }\n      });\n    }\n\n    const newPost = { ...post\n    };\n    newPost.reports.push(auth.user._id);\n    dispatch({\n      type: POST_TYPES.REPORT_POST,\n      payload: newPost\n    });\n\n    try {\n      const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const savePost = _ref8 => {\n  let {\n    post,\n    auth\n  } = _ref8;\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: [...auth.user.saved, post._id]\n    };\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unSavePost = _ref9 => {\n  let {\n    post,\n    auth\n  } = _ref9;\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: auth.user.saved.filter(id => id !== post._id)\n    };\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Laureen/Downloads/escort backup/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","imageUpload","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","REPORT_POST","SAVE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","reportPost","reportExist","reports","find","report","push","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\n\n\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\",\n};\n\nexport const createPost = ({content, images, auth, socket}) => async dispatch => {\n    let media = [];\n\n    try {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} });\n\n        if(images.length > 0){ media = await imageUpload(images)}\n\n        const res = await postDataAPI('posts', {content, images: media}, auth.token );\n\n        \n        dispatch({ type: POST_TYPES.CREATE_POST , payload: {...res.data.newPost, user: auth.user} });\n        \n        dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\n        \n\n        // todo notification\n        const msg = {\n          id: res.data.newPost._id,\n          text: \"Added a new post.\",\n          recipients: res.data.newPost.user.followers,\n          url: `/post/${res.data.newPost._id}`,\n          content, \n          image: media[0].url\n        };\n\n        dispatch(createNotify({msg, auth, socket}));\n\n    } catch (err) {\n        dispatch({\n            type: GLOBALTYPES.ALERT,\n            payload: {\n                error: err.response.data.msg\n            }\n        })\n    }\n}\n\n\nexport const getPosts = (token) => async dispatch => {\n    try {\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: true  });\n        const res = await getDataAPI('posts', token);\n        dispatch({ type: POST_TYPES.GET_POSTS, payload: {...res.data, page: 2} });\n\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\n    } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg,\n          },\n        });\n    }\n}\n\n\nexport const updatePost = ({ content, images, auth, status }) => async (dispatch) => {\n  let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if(status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length){\n        return;\n    }\n  try {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n    const res = await patchDataAPI(\n      `post/${status._id}`,\n      { content, images: [...imgOldUrl, ...media] },\n      auth.token\n    );\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const likePost = ({ post, auth, socket }) => async (dispatch) => {\n  const newPost = {...post, likes: [...post.likes, auth.user]};\n\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n  socket.emit(\"likePost\", newPost);\n  \n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url,\n    };\n\n    dispatch(createNotify({ msg, auth, socket }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const unLikePost = ({ post, auth, socket }) => async (dispatch) => {\n  const newPost = { ...post, likes: post.likes.filter(like => like._id !== auth.user._id) };\n\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n  socket.emit(\"unLikePost\", newPost);\n\n  \n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`, \n    };\n\n    dispatch(removeNotify({ msg, auth, socket }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const getPost = ({ detailPost, id, auth }) => async (dispatch) => {\n  if(detailPost.every(post => post._id !== id )){\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post})\n\n\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  }\n};\n\n\nexport const deletePost = ({ post, auth, socket }) => async (dispatch) => {\n  dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token);\n\n    // todo notification\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`,\n    };\n\n    dispatch(removeNotify({ msg, auth, socket }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\n\nexport const reportPost = ({ post, auth }) => async (dispatch) => {\n\n  const reportExist = post.reports.find(report => report === auth.user._id);\n\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"You have already reported this post.\" },\n    });\n  }\n    const newPost = { ...post };\n    newPost.reports.push(auth.user._id);\n\n  dispatch({ type: POST_TYPES.REPORT_POST, payload: newPost });\n  \n\ntry {\n  const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n  dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n} catch (err) {\n  dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: err.response.data.msg,\n    },\n  });\n}\n};\n\nexport const savePost = ({ post, auth }) => async (dispatch) => {\n  const newUser = {...auth.user, saved: [...auth.user.saved, post._id] };\n\n  dispatch({ type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}});\n\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n\nexport const unSavePost = ({ post, auth }) => async (dispatch) => {\n  const newUser = { ...auth.user, saved: auth.user.saved.filter(id => id !== post._id) };\n\n  dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg,\n      },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}