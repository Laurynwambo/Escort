{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nexport const PROFILE_TYPES = {\n  LOADING: \"LOADING_PROFILE\",\n  GET_USER: \"GET_PROFILE_USER\",\n  GET_ID: \"GET_PROFILE_ID\",\n  GET_POSTS: \"GET_PROFILE_POSTS\",\n  UPDATE_POST: \"UPDATE_PROFILE_POSTS\"\n};\nexport const getProfileUsers = _ref => {\n  let {\n    id,\n    auth\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: PROFILE_TYPES.GET_ID,\n      payload: id\n    });\n\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = getDataAPI(`/user/${id}`, auth.token);\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n      const users = await res;\n      const posts = await res1;\n      dispatch({\n        type: PROFILE_TYPES.GET_USER,\n        payload: users.data\n      });\n      dispatch({\n        type: PROFILE_TYPES.GET_POSTS,\n        payload: { ...posts.data,\n          _id: id,\n          page: 2\n        }\n      });\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateProfileUser = _ref2 => {\n  let {\n    userData,\n    avatar,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    if (!userData.firstname) {\n      return dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: \"Please enter first name.\"\n        }\n      });\n    }\n\n    if (userData.firstname.length > 25) {\n      return dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: \"First name is too long.\"\n        }\n      });\n    }\n\n    try {\n      let media;\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n\n      if (avatar) {\n        media = await imageUpload([avatar]);\n      }\n\n      const res = await patchDataAPI(\"user\", { ...userData,\n        avatar: avatar ? media[0].url : auth.user.avatar\n      }, auth.token);\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: { ...auth,\n          user: { ...auth.user,\n            ...userData,\n            avatar: avatar ? media[0].url : auth.user.avatar\n          }\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Laureen/Downloads/escort backup/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","getDataAPI","patchDataAPI","imageUpload","PROFILE_TYPES","LOADING","GET_USER","GET_ID","GET_POSTS","UPDATE_POST","getProfileUsers","id","auth","dispatch","type","payload","res","token","res1","users","posts","data","_id","page","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","firstname","length","media","loading","url","user","AUTH","success"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\n\n\nexport const PROFILE_TYPES = {\n  LOADING: \"LOADING_PROFILE\",\n  GET_USER: \"GET_PROFILE_USER\",\n  GET_ID: \"GET_PROFILE_ID\",\n  GET_POSTS: \"GET_PROFILE_POSTS\",\n  UPDATE_POST: \"UPDATE_PROFILE_POSTS\",\n\n};\n\n\nexport const getProfileUsers = ({ id, auth}) => async (dispatch) => {\n\n  dispatch({type:PROFILE_TYPES.GET_ID, payload: id})\n\n    try {\n      dispatch({type: PROFILE_TYPES.LOADING, payload:true});\n      const res =  getDataAPI(`/user/${id}`, auth.token);\n      \n      const res1 =  getDataAPI(`/user_posts/${id}`, auth.token);\n\n      const users = await res;\n      const posts = await res1;\n\n      dispatch({ type: PROFILE_TYPES.GET_USER, payload: users.data });\n      dispatch({ type: PROFILE_TYPES.GET_POSTS, payload: {...posts.data, _id: id, page: 2} });\n\n      dispatch({ type: PROFILE_TYPES.LOADING, payload: false });\n      \n    } catch (err) {\n      dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} });\n    }\n  }\n\n\n\nexport const updateProfileUser = ({userData, avatar, auth}) => async (dispatch) => {\n  if(!userData.firstname){\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Please enter first name.\"}})\n  }\n\n  if (userData.firstname.length > 25) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"First name is too long.\" },\n    });\n  }\n\n  try {\n    let media;\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { loading: true }\n    });\n\n    if(avatar){\n      media = await imageUpload([avatar]);\n    }\n\n    const res = await patchDataAPI(\"user\", { ...userData, avatar: avatar ? media[0].url : auth.user.avatar }, auth.token);\n\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        ...auth,\n        user: {\n          ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar,\n        },\n      },\n    });\n   \n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { success: res.data.msg },\n    });\n\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}