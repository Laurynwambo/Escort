{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nexport const createComment = _ref => {\n  let {\n    post,\n    newComment,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      }); // todo socket\n\n      socket.emit(\"createComment\", newPost); // todo notification\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply ? newComment.content : post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateComment = _ref2 => {\n  let {\n    comment,\n    post,\n    content,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComments = EditData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeComment = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeComment = _ref4 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: DeleteData(comment.likes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteComment = _ref5 => {\n  let {\n    post,\n    comment,\n    auth,\n    socket\n  } = _ref5;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('deleteComment', newPost);\n\n    try {\n      deleteArr.forEach(item => {\n        deleteDataAPI(`comment/${item._id}`, auth.token); // todo notification\n\n        const msg = {\n          id: item._id,\n          text: item.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n          recipients: item.reply ? [item.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Laureen/Downloads/escort/client/src/redux/actions/commentAction.js"],"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","createNotify","removeNotify","postDataAPI","patchDataAPI","deleteDataAPI","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\n\n\n\n\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\n    const newPost = {...post, comments: [...post.comments, newComment]};\n    \n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n    try {\n      const data = {\n        ...newComment,\n        postId: post._id,\n        postUserId: post.user._id,\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n\n      const newData = { ...res.data.newComment, user: auth.user };\n      const newPost = { ...post, comments: [...post.comments, newData] };\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n\n      // todo socket\n      socket.emit(\"createComment\", newPost);\n\n      // todo notification\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply\n          ? newComment.content\n          : post.content,\n        image: post.images[0].url,\n      };\n\n      dispatch(createNotify({ msg, auth, socket }));\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n    }\n};\n\n\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\n  const newComments = EditData(post.comments, comment._id, {...comment, content});\n  const newPost = {...post, comments: newComments};\n  \n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  try {\n    await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\n\n  } catch (err) {\n    dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n  }\n};\n\nexport const likeComment= ({comment, post, auth}) => async (dispatch) => {\n    const newComment = {...comment, likes: [...comment.likes, auth.user]};\n     const newComments = EditData(post.comments, comment._id, newComment);\n     const newPost = { ...post, comments: newComments };\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    try {\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n\n    }\n};\n\nexport const unLikeComment = ({ comment, post, auth }) => async (dispatch) => {\n  const newComment = { ...comment, likes: DeleteData(comment.likes, auth.user._id) };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post, comments: newComments };\n\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\n\nexport const deleteComment = ({ post, comment, auth, socket }) => async (dispatch) => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n\n  const newPost = {\n    ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  }\n\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  socket.emit('deleteComment', newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n\n      // todo notification\n      const msg = {\n        id: item._id,\n        text: item.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n      };\n\n      dispatch(removeNotify({ msg, auth, socket }));\n    })\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}